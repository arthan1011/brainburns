plugins {
    id "com.moowork.node" version "1.0.1"
    id "de.richsource.gradle.plugins.typescript" version "1.8.0"
    id 'java'
    id 'war'
}

import com.brainburns.build.MyCompileTypeScript
import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

group 'com.brainburns'
version '0.1'

war {
    manifest {
        attributes('Version': rootProject.version)
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    webappRunner
}

dependencies {
    compile group: 'org.springframework', name: 'spring-webmvc', version: '4.3.5.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '4.1.3.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-config', version: '4.1.3.RELEASE'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'javax.servlet:jstl:1.2'
    webappRunner group: 'com.github.jsimone', name: 'webapp-runner', version: '8.5.9.0'
    compileOnly group: 'javax.servlet', name: 'servlet-api', version: '2.5'

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

compileTypeScript {
    source = file("${webAppDirName}/resources/script/ts")
    outputDir = file("${webAppDirName}/resources/script/js")
    target = 'ES2015'
}

task my_npm_install(type: NpmTask) {
    args = ['install']
    execOverrides {
        it.workingDir = file("${webAppDirName}/resources")
    }
}

node {
    download = true
    workDir = file("${project.buildDir}/nodejs")
//    nodeModulesDir = file("${webAppDirName}/resources/node_modules")
}

String nodeExecutable() {
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}

task myCompileTypeScript(type: MyCompileTypeScript) {
    source = file("${webAppDirName}/resources/ts")
    include '**/*.ts'
//    exclude '**/node_modules/**/*.ts'
    target 'es2015'
    module 'commonjs'
    moduleResolution 'node'
    sourcemap true
    noImplicitAny true
    emitDecoratorMetadata true
    experimentalDecorators true
    outputDir = file("${webAppDirName}/resources/app/js")
    compilerExecutable "${nodeExecutable()} node_modules/typescript/lib/tsc.js"
    workingDirectory file("${webAppDirName}/resources")
    dependsOn "my_npm_install"
}

task tscCompile(type: Exec) {
    workingDir "${webAppDirName}/resources"
    commandLine 'cmd', '/c', 'tsc'
}

// for heroku
task copyToLib(type: Copy) {
    into "$buildDir/server"
    from(configurations.webappRunner) {
        include "webapp-runner*"
        rename 'webapp-runner.*','webapp-runner.jar'
    }
}
task stage(dependsOn: ['war', 'clean'])
stage.dependsOn(copyToLib)
war.mustRunAfter clean


task wrapper(type: Wrapper) {
    gradleVersion = '3.1' //we want gradle 2.10 to run this project
}

processResources.dependsOn {
    [my_npm_install, myCompileTypeScript]
}
